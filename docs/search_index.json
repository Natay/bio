[["index.html", "Welcome to bio Quick links Why do we need this software? Diving right in A more realistic example Download and rename Convert to different formats Align nucleotides or peptides Look up the taxonomy See the bioproject bio is a data model What does bio do? But wait there is more Comparisons to EMBOSS", " Welcome to bio The software is currently under development. It is operational but not fully vetted. bio - command-line utilities to make bioinformatics explorations more enjoyable. Built on top of BioPython and other existing packages; bio streamlines the tedious bioinformatics tasks such as: downloading and storing data converting between formats extracting a subset of information visualizing alignments exploring taxonomies  and more  Compare the gene GFF models made with bio (left) to those you download from official sources like NCBI (right): Having access to all the utility described above makes the bio package well suited for exploratory analysis of genomes. The software was written to teach bioinformatics and is the companion software to the Biostar Handbook Quick links Source code: https://github.com/ialbert/bio Use cases: bio_examples.sh Why do we need this software? If youve ever done bioinformatics you know how even seemingly straightforward tasks require multiple steps, arcane incantations, reading documentation and numerous other preparations that slow down your progress. Time and again I found myself not pursuing an idea because getting to the fun part was too tedious. The bio package is meant to solve that tedium. Diving right in Here is how to align the first 1000 basepairs of SARS-COV-2 versus to the same region of a bat coronavirus: # Get the data. bio NC_045512 MN996532 --fetch Align the sequences. bio NC_045512 MN996532 --align --end 1000 | head # Ident=969(96.9%) Mis=31(3.1%) Gaps=0(0.0%) Target=(1, 1001) Query=(1, 1001) Length=1,000 Score=4721.0 NUC.4.4(11,1) MN996532.2 ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTG ||||||||||||||||||.|||||||||||||||||.||||.|||||||||||||||||||||||||||||||||||||||||||||||| 90 NC_045512.2 ATTAAAGGTTTATACCTTTCCAGGTAACAAACCAACGAACTCTCGATCTCTTGTAGATCTGTTCTCTAAACGAACTTTAAAATCTGTGTG MN996532.2 GCTGTCACTCGGCTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGACACGAGTAACTCGTCTATC .||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||| 180 NC_045512.2 ACTGTCACTCGGCTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGACACGAGTAACTCATCTATC thats it. A more realistic example Suppose you wanted to identify the differences between the S protein of the bat coronavirus deposited as MN996532 and the S protein of the ancestral SARS-COV-2 virus designated by the NCBI via accession number NC_045512. If you are a trained bioinformatician, think about all the steps you would need to perform to accomplish this task, then think about the effort it would take you to teach someone else how to do the same. With the bio package the process takes simple, concise steps. Download and rename First we download and rename the data keep our sanity: bio NC_045512 --fetch --rename ncov bio MN996532 --fetch --rename ratg13 From now on bio can operate on NC_045512 using the name ncov and on MN996532 using the name ratg13 no matter where you are on your computer! Convert to different formats bio stores data in an internal storage system that it can find from any location. There is no clutter of files or paths to remember. For example, in any directory you now can type: bio ncov --fasta --end 100 and it will show you the first 100 bases of the genome &gt;ncov Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCT GTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTC You could also convert the data stored under ncov name to other formats. Lets convert features with type CDS to GFF: bio ncov --gff --type CDS | head -5 ##gff-version 3 NC_045512.2 . CDS 266 13468 . + . ID=CDS-1;Parent=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 13468 21555 . + . ID=CDS-2;Parent=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 266 13483 . + . ID=CDS-3;Parent=YP_009725295.1;Name=YP_009725295.1;gene=ORF1ab;locus_tag=GU280_gp01;note=pp1a;codon_start=1;product=ORF1a polyprotein;protein_id=YP_009725295.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 21563 25384 . + . ID=CDS-4;Parent=YP_009724390.1;Name=YP_009724390.1;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;note=structural protein; spike protein;codon_start=1;product=surface glycoprotein;protein_id=YP_009724390.1;db_xref=GeneID:43740568;gene_id=GU280_gp02 Align nucleotides or peptides Now, back to our problem of aligning proteins. Lets align the first 90 basepairs of DNA sequences for the S protein for each organism, bio even gives you a shortcut, instead of typing --gene S --type CDS you can write it as ncov:S : bio ncov:S ratg13:S --end 60 --align # Ident=57(95.0%) Mis=3(5.0%) Gaps=0(0.0%) Target=(1, 61) Query=(1, 61) Length=60 Score=273.0 NUC.4.4(11,1) QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACC ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||. 60 YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACT We can visualize the translation of the DNA into aminoacids with one letter (-1) or three letter codes (-3): bio ncov:S ratg13:S --end 60 --align -1 # Ident=57(95.0%) Mis=3(5.0%) Gaps=0(0.0%) Target=(1, 61) Query=(1, 61) Length=60 Score=273.0 NUC.4.4(11,1) M F V F L V L L P L V S S Q C V N L T T QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACC ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||. 60 YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACT M F V F L V L L P L V S S Q C V N L T T If instead we wanted to align the 60bp DNA subsesequences for S protein after their translation into proteins we could do it like so: bio ncov:S ratg13:S --translate --end 60 --align # Ident=20(100.0%) Mis=0(0.0%) Gaps=0(0.0%) Target=(1, 21) Query=(1, 21) Length=20 Score=98.0 BLOSUM62(11,1) QHR63300.2 MFVFLVLLPLVSSQCVNLTT |||||||||||||||||||| 20 YP_009724390 MFVFLVLLPLVSSQCVNLTT We can note right away that all differences in the first 60bp of DNA are synonymous substitutions, the protein translations are the same. Look up the taxonomy Then additional data source can be fully integrated. Finding the lineage of the organism is as simple as: bio ncov --taxon --lineage superkingdom, Viruses, 10239 clade, Riboviria, 2559587 kingdom, Orthornavirae, 2732396 phylum, Pisuviricota, 2732408 class, Pisoniviricetes, 2732506 order, Nidovirales, 76804 suborder, Cornidovirineae, 2499399 family, Coronaviridae, 11118 subfamily, Orthocoronavirinae, 2501931 genus, Betacoronavirus, 694002 subgenus, Sarbecovirus, 2509511 species, Severe acute respiratory syndrome-related coronavirus, 694009 no rank, Severe acute respiratory syndrome coronavirus 2, 2697049 See the bioproject bio knows about bioprojects and sequencing data, what is stored in the SRA about our data? As it turns out the data for ncov data is not properly cross-referenced at NCBI  thus we cant quite get the SRR run numbers automatically. Lets pick another data that has better cross references, perhaps a virus from the 2014 Ebola outbreak: bio KM233118 --fetch --rename ebola14 and now print: bio ebola14 --sra ebola14 BioProject PRJNA257197 ebola14 BioSample SAMN02952049 if we wanted the SRR run numbers we could run: bio ebola14 --sra --sample to get: [ { &quot;Run&quot;: &quot;SRR1553609&quot;, &quot;ReleaseDate&quot;: &quot;2014-08-19 11:41:53&quot;, &quot;LoadDate&quot;: &quot;2014-08-19 11:18:49&quot;, &quot;spots&quot;: &quot;464802&quot;, &quot;bases&quot;: &quot;93890004&quot;, &quot;spots_with_mates&quot;: &quot;464802&quot;, &quot;avgLength&quot;: &quot;202&quot;, &quot;size_MB&quot;: &quot;51&quot;, &quot;download_path&quot;: &quot;https://sra-downloadb.be-md.ncbi.nlm.nih.gov/sos1/sra-pub-run-5/SRR1553609/SRR1553609.1&quot;, &quot;Experiment&quot;: &quot;SRX674271&quot;, &quot;LibraryName&quot;: &quot;NM042.3.FCH9&quot;, &quot;LibraryStrategy&quot;: &quot;RNA-Seq&quot;, &quot;LibrarySelection&quot;: &quot;cDNA&quot;, &quot;LibrarySource&quot;: &quot;TRANSCRIPTOMIC&quot;, &quot;LibraryLayout&quot;: &quot;PAIRED&quot;, ... bio is a data model Beyond the functionality that we show, bio is also an exploration into modeling biological data. The current standards and practices are woefully antiquated and painfully inadequate, the default formats at GenBank or EMBL are dishearteningly inefficient, and depressingly tedious to program with. In contrast, take a look under the hood, in bio all data are in a simple, efficient, quick to load, compressed in JSON format. bio ncov | head -20 [ { &quot;id&quot;: &quot;NC_045512.2&quot;, &quot;definition&quot;: &quot;Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome&quot;, &quot;dblink&quot;: [ &quot;BioProject:PRJNA485481&quot; ], &quot;locus&quot;: &quot;NC_045512&quot;, &quot;feature_count&quot;: 57, &quot;origin_len&quot;: 29903, &quot;molecule_type&quot;: &quot;ss-RNA&quot;, &quot;topology&quot;: &quot;linear&quot;, &quot;data_file_division&quot;: &quot;VRL&quot;, &quot;date&quot;: &quot;18-JUL-2020&quot;, &quot;accessions&quot;: [ &quot;NC_045512&quot; ], &quot;sequence_version&quot;: 2, &quot;keywords&quot;: [ &quot;RefSeq&quot; The data layout allows bio to read in the entire human chromosome 1, with its 253 million characters and 328 thousand genomic features, in just three(!) seconds. In another 3 seconds bio can convert that information fasta or gff, it can filter it by type, translate the sequence, extract proteins, slice by coordinate etc: time bio chr1 --fasta | wc -c 253105766 real 0m6.238s user 0m4.156s sys 0m2.172s For shorter genomes, bacterial or viral the conversion times are under a fraction of a second. Thanks to the representation it is trivially easy to extend bio. The data is already structured in an efficient layout that needs no additional parsing to load. What does bio do? fetches the data from NCBI creates a more efficient local representation the data stores this representation so that next time you need it is available much faster generates alignments But wait there is more How about translating the reverse of the last 10 nucleotides of every feature labeled as CDS. bio can do that, just keep adding parameters :-) : bio ncov --fasta --type CDS --start -10 --reverse --translate ah yes, if that is what you needed, here it is: &gt;YP_009724389.1 [-9:21291], reverse, translated DNA NQQ &gt;YP_009725295.1 [-9:13218], reverse, translated DNA NVA &gt;YP_009724390.1 [-9:3822], reverse, translated DNA NTH ... And so on. bio has a wealth of utility that makes bioinformatics more accessible. Comparisons to EMBOSS The software with the most similar goals to bio is the emboss suite, a revolutionary software package developed decades ahead of its time. Unfortunately, perhaps because of being developed so early on, the amazing feats of software engineering within emboss are deployed with a nearly incomprehensible documentation that attempts, in vain, to describe an incredibly obtuse command interface. We love the concept of emboss but even after many years we dont understand how to use it. We constantly have to consult the manual for details. Moreover commands that use emboss suites tend to end up as a series of hard to read arcane commands that are surprisingly difficult to comprehend even for experienced scientists. Criticism aside, imitation is the greatest form of flattery, bio is an homage to emboss with the hope that one day, we can replace some functionality from emboss with code that brings joy rather than frustrations. "],["bio-install.html", "Software installation Installation Quick start Usage Subcommands Getting help Actual help pages", " Software installation bio works on Linux and Mac computers and on Windows when using the Linux Subsystem. Installation While the following command should work: pip install bio --upgrade We usually recommend installing prerequisites with conda like so: conda install -c bioconda biopython then proceed with pip install bio --upgrade. Quick start Run a simple fetch command, set the verbose mode to see what is happening: bio NC_045512 --fetch -v now list the known data: bio --list try out a conversion: bio NC_045512 --gff Usage Type bio followed by one or more accession numbers or data names followed by one or more flags or options. Subcommands Certain flags trigger different behaviors: bio --align bio --taxon bio --sra Getting help bio -h Subcommands will have separate help pages. For example: bio --align -h Actual help pages Below we include the help page for each active command 1. Help page for default actions bio -h usage: bio [-h] [-F] [-G] [-K] [-f] [-u] [-d] [-l] [-P] [-T] [-X] [-E] [-C] [-R] [-r &#39;&#39;] [-S &#39;&#39;] [-s &#39;&#39;] [-e &#39;&#39;] [-t &#39;&#39;] [-g &#39;&#39;] [-N &#39;&#39;] [-m &#39;&#39;] [-i] [-O] [-v] [acc [acc ...]] bio - making bioinformatics fun again Command line utilities for manipulating bioinformatics data. Subcommands with additional help: bio --align -h bio --taxon -h bio --sra -h positional arguments: acc data names optional arguments: -h, --help show this help message and exit -F, --fasta produce FASTA format -G, --gff produce GFF format -K, --genbank show the genbank file if exists -f, --fetch download data as accessions -u, --update updates data in storage -d, --delete delete data in storage -l, --list list data in storage -P, --protein operate on proteins -T, --translate translate DNA to protein -X, --transcribe transrcribe DNA to RNA -E, --reverse reverse sequence -C, --complement complement sequence -R, --revcomp reverse complement sequence -r &#39;&#39;, --rename &#39;&#39; set the name -S &#39;&#39;, --seqid &#39;&#39; set the sequence id -s &#39;&#39;, --start &#39;&#39; start coordinate -e &#39;&#39;, --end &#39;&#39; end coordinate -t &#39;&#39;, --type &#39;&#39; select feature by type -g &#39;&#39;, --gene &#39;&#39; select features associated with gene -N &#39;&#39;, --name &#39;&#39; select features associated with a name -m &#39;&#39;, --match &#39;&#39; select features by rexep match -i, --inter interactive (data from command line) -O, --origin use the origin (source) sequences -v, --verbose verbose mode 2. Help page for alignments bio --align -h usage: bio [-h] [-s 1] [-e &#39;&#39;] [-o 11] [-x 1] [-L] [-G] [-S] [-p] [-t] [-i] [-T] [-R] [-1] [-3] [-v] [target] [query] Performs an alignment between the query and target. positional arguments: target target sequence to align query query sequence to align optional arguments: -h, --help show this help message and exit -s 1, --start 1 start coordinate -e &#39;&#39;, --end &#39;&#39; end coordinate -o 11, --gap-open 11 gap open penalty -x 1, --gap-extend 1 gap extend penalty -L, --local perform local alignment -G, --global perform global alignment (zero end gap penalty) -S, --semiglobal perform a semiglobal alignment -p, --protein use the translated protein sequences from the data -t, --translate translate the DNA into proteins -i, --inter interactive mode, data from command line -T, --table generate an alignment table -R, --strict strict global alignment, apply end gap penalties -1, --pep1 shows a translated peptide with one letter code -3, --pep3 shows a translated peptide with three letter code -v, --verbose verbose mode, progress messages printed 3. Help page for taxonomy bio --taxon -h usage: bio [-h] [-T 0] [-l] [-f] [-i ] [-S ,] [-L] [-b] [-d] [-p] [-v] [words [words ...]] positional arguments: words taxids or search queries optional arguments: -h, --help show this help message and exit -T 0, --limit 0 limit the number of entries -l, --list lists database content -f, --flat flattened output -i , --indent the indentation string -S , , --sep , separator string -L, --lineage show the lineage for a taxon term -b, --build build a database from a taxdump -d, --download download newest taxdump from NCBI -p, --preload loads entire database in memory -v, --verbose verbose mode, prints more messages 4. Help page for SRA search bio --sra -h usage: bio [-h] [-p] [-l &#39;&#39;] [-s] [-t] [-i] [-v] [acc [acc ...]] positional arguments: acc accessions optional arguments: -h, --help show this help message and exit -p, --project project run information -l &#39;&#39;, --limit &#39;&#39; limit the number of results -s, --sample sample information -t, --table tabular output -i, --inter interactive (data from command line) -v, --verbose verbose mode, prints more messages "],["bio-data.html", "Fetching data Getting data from NCBI (fetch) Rename (rename) Listing the storage (list) Delete data (delete) Update data (update) View data Local data Data from command line What is the point of getting data from command line?", " Fetching data The bio package solves the ongoing struggle of how to maintain sanity among diverse datasets. When you obtain data with bio it becomes universally available to all tools in the package. Getting data from NCBI (fetch) The --fetch command downloads data identified via accession numbers from NCBI then stores this data in a storage directory (~/.bio). All subsequent commands in the bio package can seamlessly access the stored data from any location and would not need to connect to the internet to use it. # Run fetch in verbose mode. bio NC_045512 --fetch -v Running the fetch command the next time for the same accession number will not connect to the internet again, it will use the existing data instead. Use the --fetch --update (see later) to force a re-downloading of data from NCBI. Most commands can operate on multiple accession numbers at a time. bio NC_045512 MN996532 --fetch There will be commands like --rename where it makes no sense to apply the operation on multiple data at the same time. In those cases only the first accession number is acted upon. The internal, gzip compressed, JSON based representation used by bio is simple, efficient and highly performant. A 330MB GenBank file for chromosome 1 of the human genome obtained from NCBI will in our data representation take just 67MB to store. More importantly our data representation can read and converted to fasta format in 6 seconds: time bio NC_000001 --fasta | wc -c 253105766 real 0m6.189s Rename (rename) Accession numbers are tedious to handle. Almost always we rename data to be meaningful. bio NC_045512 --fetch --rename ncov the command above will store the data under the name ncov. Within the data the sequence will still be labeled as NC_045512. You may change both the name and sequence id: bio NC_045512 --fetch --rename ncov --seqid ncov bio NC_045512 --fetch --rename ratg13 --seqid ratg13 Now, not only is your data called ncov but the sequence id inside the data is also set to ncov. Listing the storage (list) Each time data is fetched is will be stored locally. The bio package will look in this storage no matter what directory you run it from. To list the content of the storage write: bio --list it prints: 22K ncov Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome 19K ratg13 Bat coronavirus RaTG13, complete genome Delete data (delete) To drop data from storage use: bio ncov --delete This command will only drop the JSON representation not the downloaded GenBank if exists. If you want to update the original data use the --update parameter. Update data (update) To force fetch to download data that already seems to be present do: bio NC_045512 --fetch --update Note that you cant update a renamed sequence. At that point the original accession number is lost. You can however fetch, update and rename all in one go like so: bio NC_045512 --fetch --update --rename ncov --seqid ncov There is a builtin order of operations, does not matter what order you list commands. For example --delete would take place first before the --fetch and so on. View data The default action is to view the stored data. Locally the data is stored in a JSON format that makes processing it much faster than the original GenBank yet has no loss of information: bio ncov | head Local data bio can also read and process data from local files. If you have a genbank or fasta file you can use that as input. Here we turn a genbank file into gff: bio mydata.gb --gff Data from command line In addition, there is a so called interactive input of data (-i) where the data can be listed at the command line: bio ATGAATATATAC -i --translate The above command will operate on the sequence as if it were stored in a FASTA file, the above prints: &gt;S1 translated DNA MNIY What is the point of getting data from command line? It is an explicit way to explore and demonstrate information. For example, suppose you wanted to see how the same DNA sequence would be translated to different amino acides when using the the first or second reading frame: bio ATGAATATATACT -i --translate --start 1 &gt;S1 translated MNIY versus bio ATGAATATATACT -i --translate --start 2 &gt;S1 [2:13], translated *IYT or you can explore alignments: bio THISLINE ISALIGNED --align -i to see: S1 THISLI--NE- 1 ||.: || 11 S2 --ISALIGNED "],["bio-fasta.html", "Convert to FASTA Convert the data to FASTA (the origin of the GenBank) Extract a partial sequence and change the sequence id Extract the last ten DNA bases Extract the sequences for features of a certain type Extract sequence by gene name Extract sequence by feature accession number Translate the sequence Extract the protein sequence", " Convert to FASTA Get a dataset Get SARS-COV-2 data and rename it to ncov: bio NC_045512 --fetch --rename ncov Convert the data to FASTA (the origin of the GenBank) bio ncov --fasta | head -5 &gt;NC_045512.2 Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCT GTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGGCTGCATGCTTAGTGCACT CACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGACACGAGTAACTCGTCTATC TTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATCATCAGCACATCTAGGTTT Extract a partial sequence and change the sequence id bio ncov --fasta --start 100 --end 200 --seqid foo | head -5 &gt;foo Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome CGGCTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAG GACACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGT Extract the last ten DNA bases bio ncov --fasta --start -10 --seqid last | head -5 &gt;last Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome AAAAAAAAAA Extract the sequences for features of a certain type bio ncov --fasta --type CDS | head -5 &gt;YP_009724389.1 ID=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578 ATGGAGAGCCTTGTCCCTGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTT TTACAGGTTCGCGACGTGCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCA GAGGCACGTCAACATCTTAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTT TTGCCTCAACTTGAACAGCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCT Extract sequence by gene name bio ncov:S --fasta --start 100 --end 200 | head -5 &gt;YP_009724390.1 [100:200] CGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGTTTTACATTCAACTCAGGAC TTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGC Extract sequence by feature accession number bio ncov:YP_009724390.1 --fasta --start 100 --end 200 | head -5 &gt;YP_009724390.1 [100:200] CGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGTTTTACATTCAACTCAGGAC TTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGC Translate the sequence This command translates the DNA sequence to peptides: bio ncov:S --fasta --start 100 --end 200 --translate | head -5 &gt;YP_009724390.1 [100:200], translated RGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFH The slice 100 to 200 is applied on the DNA sequence before the translation. Extract the protein sequence This flag extracts the protein sequence embedded in the original GenBank file: bio ncov:S --fasta --start 100 --end 200 --protein | head -5 &gt;YP_009724390.1 ID=YP_009724390.1;Name=YP_009724390.1;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;note=structural protein; spike protein;codon_start=1;product=surface glycoprotein;protein_id=YP_009724390.1;db_xref=GeneID:43740568 IIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRV YSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGY Note how in this case the slice 100 to 200 is applied on the protein sequence. "],["bio-gff.html", "Convert to GFF Building a nicer gene model GFF created with bio Convert all features to GFF: Convert to GFF only the features with type CDS Convert to GFF only the features tagged with gene S Convert to GFF only the features that overlap a interval", " Convert to GFF Building a nicer gene model bio creates more meaningful and nicer GFF visualizations: # Get chromosome 2L for Drosophila melanogaster (fruit-fly) bio NT_033779 --fetch --rename fly convert it to gff: bio fly --gff &gt; annotations.gff GFF created with bio Here is a region from the GFF file created with the code above as visualized in IGV: The features are explicit, well separated, colored by type, and easier to see and interpret. Below is the same region of the GFF file as downloaded from NCBI. We believe it is more difficult to understand. bio follows the definitions in the Sequence Ontology. In the GFF files created with bio an exon will parented to a transcript, a CDS will belong to an mRNA. NCBI will use the mRNA as the parent for both types. gene --&gt; transcript --&gt; exon gene --&gt; mRNA --&gt; CDS Other considerations: Exons have transcript_id and gene_id attributes set. CDS features have protein_id and gene_id attributes set. Get a dataset Get SARS-COV-2 data and rename it to ncov: bio NC_045512 --fetch --rename ncov Convert all features to GFF: bio ncov --gff | head -5 ##gff-version 3 NC_045512.2 . region 1 29903 . + . ID=1;Name=Severe acute respiratory syndrome coronavirus 2;organism=Severe acute respiratory syndrome coronavirus 2;mol_type=genomic RNA;isolate=Wuhan-Hu-1;host=Homo sapiens;db_xref=taxon:2697049;country=China;collection_date=Dec-2019;color=#CECECE NC_045512.2 . five_prime_UTR 1 265 . + . ID=2;Name=five_prime_UTR;color=#cc0e74 NC_045512.2 . gene 266 21555 . + . ID=GU280_gp01;Name=ORF1ab;gene=ORF1ab;locus_tag=GU280_gp01;db_xref=GeneID:43740578;color=#cb7a77 NC_045512.2 . mRNA 266 21555 . + . ID=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;color=#7a77cb Convert to GFF only the features with type CDS bio ncov --gff --type CDS | head -5 ##gff-version 3 NC_045512.2 . CDS 266 13468 . + . ID=CDS-1;Parent=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 13468 21555 . + . ID=CDS-2;Parent=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 266 13483 . + . ID=CDS-3;Parent=YP_009725295.1;Name=YP_009725295.1;gene=ORF1ab;locus_tag=GU280_gp01;note=pp1a;codon_start=1;product=ORF1a polyprotein;protein_id=YP_009725295.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 NC_045512.2 . CDS 21563 25384 . + . ID=CDS-4;Parent=YP_009724390.1;Name=YP_009724390.1;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;note=structural protein; spike protein;codon_start=1;product=surface glycoprotein;protein_id=YP_009724390.1;db_xref=GeneID:43740568;gene_id=GU280_gp02 Convert to GFF only the features tagged with gene S bio ncov --gff --gene S | head -5 ##gff-version 3 NC_045512.2 . gene 21563 25384 . + . ID=GU280_gp02;Name=S;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;db_xref=GeneID:43740568;color=#cb7a77 NC_045512.2 . mRNA 21563 25384 . + . ID=YP_009724390.1;Name=YP_009724390.1;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;note=structural protein; spike protein;codon_start=1;product=surface glycoprotein;protein_id=YP_009724390.1;db_xref=GeneID:43740568;color=#7a77cb NC_045512.2 . CDS 21563 25384 . + . ID=CDS-4;Parent=YP_009724390.1;Name=YP_009724390.1;gene=S;locus_tag=GU280_gp02;gene_synonym=spike glycoprotein;note=structural protein; spike protein;codon_start=1;product=surface glycoprotein;protein_id=YP_009724390.1;db_xref=GeneID:43740568;gene_id=GU280_gp02 Convert to GFF only the features that overlap a interval bio ncov --gff --start 2000 --end 3000 | head -5 ##gff-version 3 NC_045512.2 . region 1 29903 . + . ID=1;Name=Severe acute respiratory syndrome coronavirus 2;organism=Severe acute respiratory syndrome coronavirus 2;mol_type=genomic RNA;isolate=Wuhan-Hu-1;host=Homo sapiens;db_xref=taxon:2697049;country=China;collection_date=Dec-2019;color=#CECECE NC_045512.2 . gene 266 21555 . + . ID=GU280_gp01;Name=ORF1ab;gene=ORF1ab;locus_tag=GU280_gp01;db_xref=GeneID:43740578;color=#cb7a77 NC_045512.2 . mRNA 266 21555 . + . ID=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;color=#7a77cb NC_045512.2 . CDS 266 13468 . + . ID=CDS-1;Parent=YP_009724389.1;Name=YP_009724389.1;gene=ORF1ab;locus_tag=GU280_gp01;ribosomal_slippage=;note=pp1ab; translated by -1 ribosomal frameshift;codon_start=1;product=ORF1ab polyprotein;protein_id=YP_009724389.1;db_xref=GeneID:43740578;gene_id=GU280_gp01 "],["bio-json.html", "Convert to JSON References", " Convert to JSON bio obtains data from NCBI and transforms it into an internal, simpler format. One would only need to process this format to provide functionality that is not yet offered in bio Get a dataset Get SARS-COV-2 data and rename it to ncov: bio NC_045512 --fetch --rename ncov The GenBank data Explore the contents of the file downloaded from NCBI bio ncov --genbank | head LOCUS NC_045512 29903 bp ss-RNA linear VRL 18-JUL-2020 DEFINITION Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome. ACCESSION NC_045512 VERSION NC_045512.2 DBLINK BioProject: PRJNA485481 KEYWORDS RefSeq. SOURCE Severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2) ORGANISM Severe acute respiratory syndrome coronavirus 2 Viruses; Riboviria; Orthornavirae; Pisuviricota; Pisoniviricetes; JSON data representation See the transformed GenBank file as the JSON representation: bio ncov | head [ { &quot;id&quot;: &quot;NC_045512.2&quot;, &quot;definition&quot;: &quot;Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome&quot;, &quot;dblink&quot;: [ &quot;BioProject:PRJNA485481&quot; ], &quot;locus&quot;: &quot;NC_045512&quot;, &quot;feature_count&quot;: 57, &quot;origin_len&quot;: 29903, The JSON for a feature Filter the internal representation for a type and a gene name: bio ncov --type CDS --gene S | head [ { &quot;id&quot;: &quot;YP_009724390.1&quot;, &quot;name&quot;: &quot;YP_009724390.1&quot;, &quot;start&quot;: 21563, &quot;end&quot;: 25384, &quot;type&quot;: &quot;CDS&quot;, &quot;strand&quot;: 1, &quot;location&quot;: [ [ References The following references may be consulted to understand how data should be represented in GenBank and GFF formats: INSDC feature descriptions: http://www.insdc.org/files/feature_table.html#2 NCBI GenBank format: https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html NCBI GFF format: https://www.ncbi.nlm.nih.gov/genbank/genomes_gff/ "],["bio-align.html", "Sequence alignments DNA alignment DNA alignment with 1 letter amino acid codes DNA alignment with 3 letter amino acid codes DNA alignment, tabular output Align the translated regions Align the protein corresponding to gene S Default alignment is global Tabular output Local alignment Global alignment Semiglobal alignment Strict global alignment", " Sequence alignments The alignments in bio are primarily designed for exploratory use, for aligning short (a few thousand basepair long sequences), visually investigating the alignments, interacting with the sequences before and after alignment. In such cases the alignments will be generated within less than a second. The implementations are mathematically optimal but the libraries that we rely on do not scale well to longer sequences. Use a specially designed software, that relies on heuristics, to perform large scale studies. These tools will operate orders of magnitude faster. Depending on your needs blast, blat, mummer, minimap2, lastz, exonerate will be far better suited for genome wide analyses. DNA alignment Align the DNA corresponding to protein S bio ncov:S ratg13:S --end 60 --align # Ident=57(95.0%) Mis=3(5.0%) Gaps=0(0.0%) Target=(1, 61) Query=(1, 61) Length=60 Score=273.0 NUC.4.4(11,1) QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACC ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||. 60 YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACT DNA alignment with 1 letter amino acid codes bio ratg13:S ncov:S --end 60 --align -1 # Ident=57(95.0%) Mis=3(5.0%) Gaps=0(0.0%) Target=(1, 61) Query=(1, 61) Length=60 Score=273.0 NUC.4.4(11,1) M F V F L V L L P L V S S Q C V N L T T YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACT ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||. 60 QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACC M F V F L V L L P L V S S Q C V N L T T Reading frame will follow the slice! DNA alignment with 3 letter amino acid codes bio ratg13:S ncov:S --end 60 --align -3 # Ident=57(95.0%) Mis=3(5.0%) Gaps=0(0.0%) Target=(1, 61) Query=(1, 61) Length=60 Score=273.0 NUC.4.4(11,1) MetPheValPheLeuValLeuLeuProLeuValSerSerGlnCysValAsnLeuThrThr YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACT ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||. 60 QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACC MetPheValPheLeuValLeuLeuProLeuValSerSerGlnCysValAsnLeuThrThr Reading frame will follow the slice! DNA alignment, tabular output bio ncov:S ratg13:S --end 90 --align --table query target pident ident mism gaps score alen tlen tstart tend qlen qstart qend QHR63300.2 YP_009724390.1 92.2 83 7 0 387.0 90 90 1 91 90 1 91 Align the translated regions bio ncov:S ratg13:S --end 90 --translate --align # Ident=30(100.0%) Mis=0(0.0%) Gaps=0(0.0%) Target=(1, 31) Query=(1, 31) Length=30 Score=153.0 BLOSUM62(11,1) QHR63300.2 MFVFLVLLPLVSSQCVNLTTRTQLPPAYTN |||||||||||||||||||||||||||||| 30 YP_009724390 MFVFLVLLPLVSSQCVNLTTRTQLPPAYTN Align the protein corresponding to gene S The protein sequence is fetched from the data (if exists) and is not a translated DNA. bio ncov:S ratg13:S --end 30 --protein --align # Ident=30(100.0%) Mis=0(0.0%) Gaps=0(0.0%) Target=(1, 31) Query=(1, 31) Length=30 Score=153.0 BLOSUM62(11,1) QHR63300.2 MFVFLVLLPLVSSQCVNLTTRTQLPPAYTN |||||||||||||||||||||||||||||| 30 YP_009724390 MFVFLVLLPLVSSQCVNLTTRTQLPPAYTN The slice now applies to the protein sequence. Default alignment is global With the default global alignment end gaps are have no penalty. bio THISLINE ISALIGNED -i --align # Ident=4(36.4%) Mis=2(18.2%) Gaps=5(45.5%) Target=(3, 9) Query=(1, 9) Length=11 Score=8.0 BLOSUM62(11,1) S1 THISLI--NE- --||..--||- 11 S2 --ISALIGNED There is a strict mode that applies end gap penalties. Tabular output All alignment may be formatted with tabular output bio THISLINE ISALIGNED -i --align --table query target pident ident mism gaps score alen tlen tstart tend qlen qstart qend S1 S2 36.4 4 2 5 8.0 11 8 3 9 9 1 9 Local alignment Will produce all local alignments. bio THISLINE ISALIGNED -i --align --local # Ident=2(100.0%) Mis=0(0.0%) Gaps=0(0.0%) Target=(7, 9) Query=(7, 9) Length=2 Score=11.0 BLOSUM62(11,1) S1 NE || 2 S2 IS Global alignment bio THISLINE ISALIGNED -i --align --global # Ident=4(36.4%) Mis=2(18.2%) Gaps=5(45.5%) Target=(3, 9) Query=(1, 9) Length=11 Score=8.0 BLOSUM62(11,1) S1 THISLI--NE- --||..--||- 11 S2 --ISALIGNED Semiglobal alignment Same as zero endgap global but reports only the aligned region: bio THISLINE ISALIGNED -i --align --semiglobal # Ident=4(50.0%) Mis=2(25.0%) Gaps=2(25.0%) Target=(3, 9) Query=(1, 9) Length=8 Score=8.0 BLOSUM62(11,1) S1 ISLI--NE ||..--|| 8 S2 ISALIGNE Strict global alignment Applies end gap penalities. bio THISLINE ISALIGNED -i --align --global --strict # Ident=2(22.2%) Mis=6(66.7%) Gaps=1(11.1%) Target=(1, 9) Query=(1, 9) Length=9 Score=-7.0 BLOSUM62(11,1) S1 THISLINE- ......||- 9 S2 ISALIGNED "],["bio-taxonomy.html", "Taxonomy operations Building the taxonomy Check database Searching for taxids View taxonomy for data View taxonomy by tax id View a tax id Filter blast results List the content of the database: Preloading data", " Taxonomy operations The bio package provides utility to visualize NCBI taxonomies. Building the taxonomy Before using the taxonomy related functionality the representation needs to be built: bio taxon --download --build The command above has to be run once (perhaps on a monthly basis) to download and process the latest NCBI taxonomy. The efficiency of the process depends on the speed of the hard drive and takes around 30 minutes. Check database bio --taxon prints: TaxDB: nodes=2,288,072 parents=198,666 There are a total of 2,288,072 nodes (taxonomical entries) out of which 198,666 are nodes that are non-terminal (non-leaf) nodes. For these numbers we see that the vast majority of the taxonomy annotations are for terminal, leaf nodes. Searching for taxids Searches the taxonomy for a word bio taxon jawed prints: # searching taxonomy for: jawed clade, Gnathostomata (jawed vertebrates), 7776 species, Gillichthys mirabilis (long-jawed mudsucker), 8222 species, Pseudamia amblyuroptera (white-jawed cardinalfish), 1431476 species, Myctophum brachygnathum (short-jawed lanternfish), 1519985 species, Oryzias orthognathus (sharp-jawed buntingi), 1645897 species, Longjawed orbweaver circular virus 1, 2293294 species, Longjawed orbweaver circular virus 2, 2293295 The search words may use regular expression control characters: bio taxon &#39;^jawed&#39; produces: # searching taxonomy for: ^jawed clade, Gnathostomata (jawed vertebrates), 7776 View taxonomy for data Once you fetch the data bio NC_045512 --fetch --rename ncov you can view the descendants: bio ncov --taxon no rank, Severe acute respiratory syndrome coronavirus 2, 2697049 or view the lineage: bio ncov --taxon --lineage superkingdom, Viruses, 10239 clade, Riboviria, 2559587 kingdom, Orthornavirae, 2732396 phylum, Pisuviricota, 2732408 class, Pisoniviricetes, 2732506 order, Nidovirales, 76804 suborder, Cornidovirineae, 2499399 family, Coronaviridae, 11118 subfamily, Orthocoronavirinae, 2501931 genus, Betacoronavirus, 694002 subgenus, Sarbecovirus, 2509511 species, Severe acute respiratory syndrome-related coronavirus, 694009 no rank, Severe acute respiratory syndrome coronavirus 2, 2697049 View taxonomy by tax id Pass a NCBI taxonomical id to see all the descendants of it: bio 117565 --taxon | head class, Myxini, 117565 order, Myxiniformes, 7761 family, Myxinidae (hagfishes), 7762 subfamily, Eptatretinae, 30309 genus, Eptatretus, 7763 species, Eptatretus burgeri (inshore hagfish), 7764 species, Eptatretus stoutii (Pacific hagfish), 7765 species, Eptatretus okinoseanus, 7767 species, Eptatretus atami, 50612 species, Eptatretus cirrhatus (broadgilled hagfish), 78394 View a tax id Pass a NCBI taxonomical id to see all the descendants of it: bio 117565 --taxon | head class, Myxini, 117565 order, Myxiniformes, 7761 family, Myxinidae (hagfishes), 7762 subfamily, Eptatretinae, 30309 genus, Eptatretus, 7763 species, Eptatretus burgeri (inshore hagfish), 7764 species, Eptatretus stoutii (Pacific hagfish), 7765 species, Eptatretus okinoseanus, 7767 species, Eptatretus atami, 50612 species, Eptatretus cirrhatus (broadgilled hagfish), 78394 To print the lineage of a term use: bio 564286 --taxon --lineage no rank, cellular organisms, 131567 superkingdom, Bacteria (eubacteria), 2 clade, Terrabacteria group, 1783272 phylum, Firmicutes, 1239 class, Bacilli, 91061 order, Bacillales, 1385 family, Bacillaceae, 186817 genus, Bacillus, 1386 species group, Bacillus subtilis group, 653685 species, Bacillus subtilis, 1423 strain, Bacillus subtilis str. 10, 564286 the lineage may be flattened: bio 564286 --taxon --lineage --flat 564286 cellular organisms;Bacteria;Terrabacteria group;Firmicutes;Bacilli;Bacillales;Bacillaceae;Bacillus;Bacillus subtilis group;Bacillus subtilis;Bacillus subtilis str. 10 Filter blast results (TODO) - filters BLAST alignment for species that fall within a taxonomical clade List the content of the database: bio --taxon --list | head prints: no rank, root, 1 superkingdom, Bacteria (eubacteria), 2 genus, Azorhizobium, 6 species, Azorhizobium caulinodans, 7 species, Buchnera aphidicola, 9 genus, Cellvibrio, 10 species, Cellulomonas gilvus, 11 genus, Dictyoglomus, 13 species, Dictyoglomus thermophilum, 14 genus, Methylophilus, 16 Note: this command benefits greatly from using --preload. Preloading data For many use cases, the default behavior is plenty fast and can produce family, genus and species level information in a fraction of a second. Internally, during operation, the software will query the database for each child node. When selecting a rank where the number of descendant nodes is large (over 10,000 nodes) the run time of the independent queries adds up to a substantial overhead. For example the command below attempts to render the complete NCBI taxonomic tree with over 2.2 million descendant nodes. When run like so it will take a very long time to produce the output (more than two hours): bio 1 --taxon The software can operate in a different mode to speed up the process massively by preloading all the data into memory at the cost of imposing a 6 second pre-loading penalty. bio 1 --taxon --preload When run with the --preload flag the command takes a total of just 11 seconds to generate the same large tree of the entire NCBI taxonomical tree. We dont apply this mode by default because all queries would then take at least 6 seconds, even those that currently finish very quickly. For queries that take more than 10 seconds to complete (have more than 10,000 descendant nodes) we recommend applying the --preload flag. "],["bio-sra.html", "Searching SRA", " Searching SRA bio has support to automatically query your data for additional information at sra. While Not all GenBank records are properly cross referenced, but for those that are bio can get you the SRA inforamation right away. Here is how it works. Get a strain of Ebola sequenced in 2014 bio KM233118 --fetch --rename ebola First check to see if the record is being properly cross referenced: bio ebola --sra ebola BioProject PRJNA257197 ebola BioSample SAMN02952049 We can see that the data has both a BioProject and a BioSample associated with it. It means we may obtained a more the detailed information on the sequencing data that produced the information: bio ebola --sra --sample | head -38 [ { &quot;Run&quot;: &quot;SRR1553609&quot;, &quot;ReleaseDate&quot;: &quot;2014-08-19 11:41:53&quot;, &quot;LoadDate&quot;: &quot;2014-08-19 11:18:49&quot;, &quot;spots&quot;: &quot;464802&quot;, &quot;bases&quot;: &quot;93890004&quot;, &quot;spots_with_mates&quot;: &quot;464802&quot;, &quot;avgLength&quot;: &quot;202&quot;, &quot;size_MB&quot;: &quot;51&quot;, &quot;download_path&quot;: &quot;https://sra-downloadb.be-md.ncbi.nlm.nih.gov/sos1/sra-pub-run-5/SRR1553609/SRR1553609.1&quot;, &quot;Experiment&quot;: &quot;SRX674271&quot;, &quot;LibraryName&quot;: &quot;NM042.3.FCH9&quot;, &quot;LibraryStrategy&quot;: &quot;RNA-Seq&quot;, &quot;LibrarySelection&quot;: &quot;cDNA&quot;, &quot;LibrarySource&quot;: &quot;TRANSCRIPTOMIC&quot;, &quot;LibraryLayout&quot;: &quot;PAIRED&quot;, &quot;InsertSize&quot;: &quot;0&quot;, &quot;InsertDev&quot;: &quot;0&quot;, &quot;Platform&quot;: &quot;ILLUMINA&quot;, &quot;Model&quot;: &quot;Illumina HiSeq 2500&quot;, &quot;SRAStudy&quot;: &quot;SRP045416&quot;, &quot;BioProject&quot;: &quot;PRJNA257197&quot;, &quot;Study_Pubmed_id&quot;: &quot;2&quot;, &quot;ProjectID&quot;: &quot;257197&quot;, &quot;Sample&quot;: &quot;SRS677968&quot;, &quot;BioSample&quot;: &quot;SAMN02952049&quot;, &quot;SampleType&quot;: &quot;simple&quot;, &quot;TaxID&quot;: &quot;186538&quot;, &quot;ScientificName&quot;: &quot;Zaire ebolavirus&quot;, &quot;SampleName&quot;: &quot;NM042.3&quot;, &quot;Tumor&quot;: &quot;no&quot;, &quot;CenterName&quot;: &quot;BI&quot;, &quot;Submission&quot;: &quot;SRA178666&quot;, &quot;Consent&quot;: &quot;public&quot;, &quot;RunHash&quot;: &quot;9D6BFED60C2E1DAB6CC06BE718DDA1C0&quot;, &quot;ReadHash&quot;: &quot;B783CD0B858C0BED5FF3BC7319CAFF19&quot; }, We can also obtain the full run information for the entire project (we are limiting the results to make the query speedier): bio ebola --sra --project --limit 10 | head -10 [ { &quot;Run&quot;: &quot;SRR1972967&quot;, &quot;ReleaseDate&quot;: &quot;2015-04-14 13:52:35&quot;, &quot;LoadDate&quot;: &quot;2015-04-14 13:47:37&quot;, &quot;spots&quot;: &quot;1013114&quot;, &quot;bases&quot;: &quot;204649028&quot;, &quot;spots_with_mates&quot;: &quot;1013114&quot;, &quot;avgLength&quot;: &quot;202&quot;, &quot;size_MB&quot;: &quot;114&quot;, You can also produce the output in a tab delimited format: bio ebola --sra --project --table --limit 10 | cut -f 1,5,8,12,15,19,29 | head Run bases size_MB LibraryStrategy LibraryLayout Model SampleName SRR1972967 204649028 114 RNA-Seq PAIRED Illumina HiSeq 2500 G6062.1 SRR1972968 168524560 94 RNA-Seq PAIRED Illumina HiSeq 2500 G6069.1 SRR1972969 123767824 66 RNA-Seq PAIRED Illumina HiSeq 2500 G6089.1 SRR1972970 103654482 56 RNA-Seq PAIRED Illumina HiSeq 2500 G6091.1 SRR1972971 102959602 59 RNA-Seq PAIRED Illumina HiSeq 2500 G6095.1 SRR1972972 92415808 52 RNA-Seq PAIRED Illumina HiSeq 2500 G6103.1 SRR1972973 82751118 45 RNA-Seq PAIRED Illumina HiSeq 2500 G6104.1 SRR1972974 1019759024 572 RNA-Seq PAIRED Illumina HiSeq 2500 W218.0 SRR1972975 546366570 292 RNA-Seq PAIRED Illumina HiSeq 2500 W219.0 "],["comm-py.html", "comm.py Other features Rationale Limitations Usage", " comm.py When you install the bio package you get another script called comm.py installed. It is a tool that prints the common elements from two files. If file 1 contains: A B C and file 2 contains A C D the comm.py file1 file2 will print: A C Thats it. These are the elements in common in the first column of both files. Other features comm.py has many more convenience features, it can: print elements unique to file 1: B print elements unique to file 2: D print the union of elements\" A, C, B, D read different columns of the files read CSV and tab-delimited files Rationale The need to find identical elements within columns of different files is surprisingly common (pun intended). We could use the UNIX tool called comm to find common or distinct elements. When used properly comm allows you to answer a wide variety of interesting questions. Unfortunately using comm properly is no easy task. First the values must be on a single column and must be sorted. Then the comm command may feel exceedingly counter-intuitive. Instead of telling it what we want, we have to tell it what we dont want (what columns to suppress). It is completely backwards of how I like to think. While I dont usually advocate rewriting UNIX tools in this case writing a better comm makes a lot of sense. Limitations With comm.py most operations will be quicker to do, simpler to perform and easier to understand. The principal limitation of comm.py vs comm is that comm.py loads all elements into memory. Once the number of elements passes about 1 million comm.py will be noticeably and increasingly slower than comm. Under 1 million items using comm.py will work fine. Usage comm.py -h usage: comm.py [-h] [-1] [-2] [-3] [-t] [-x 1] [-y 1] file1 file2 A better &#39;comm&#39; command. Prints elements common from columns from two files. positional arguments: file1 input file 1 file2 input file 2 optional arguments: -h, --help show this help message and exit -1, --uniq1 prints elements unique to file 1 -2, --uniq2 prints elements unique to file 2 -3, --union prints elements present in both files -t, --tab tab delimited (default is csv) -x 1, --col1 1 column index for file 1 [default=1] -y 1, --col2 1 column index for file 2 [default=1] "],["bio-examples.html", "Usage examples", " Usage examples The following script is the test file that we use to verify the various functionalities of bio # # This script is used to generate Python tests. # # The output generated by each test can be seen at: # # https://github.com/ialbert/bio/tree/master/test/data # # Stop on errors. set -uex # Delete the ncov data if exists. bio ncov --delete # Fetch the accession, rename the data and change the sequence id. bio NC_045512 --fetch --rename ncov --seqid ncov # You can also fetch and convert at the same time. bio NC_045512 --fetch --fasta --end 100 &gt; fetch-convert.fa # Shows the internal JSON format of the data. bio ncov &gt; ncov.json # Convert to GenBank. bio ncov --genbank &gt; ncov.gb # Convert to FASTA. bio ncov --fasta &gt; ncov.fa # Convert to GFF. bio ncov --gff &gt; ncov.gff # Filter the internal JSON by regular expression match and type. bio ncov --match ORF1ab --type gene &gt; match.json # Convert to GFF features associated with a gene. bio ncov --gff --gene S &gt; gene1.gff # Convert to GFF features that overlap with start to end. bio ncov --gff --start 10000 --end 20000 &gt; overlap.gff # Numbers may have commas. bio ncov --gff --start 10,000 --end 20,000 &gt; overlap.gff # Numbers may be expressed with prefixes. bio ncov --gff --start 10kb --end 20kb &gt; overlap.gff # Convert to GFF by type. bio ncov --gff --type CDS &gt; type.gff # Convert to GFF by multiple types. bio ncov --gff --type gene,CDS,mRNA &gt; multiple-types.gff # Slice a FASTA to a region and change the sequence id. bio ncov --fasta --seqid foo --start 10 --end 20 &gt; fasta-start.fa # Convert to FASTA features with a certain type. bio ncov --fasta --type CDS &gt; CDS.fa # Convert to FASTA a sub region of type filtered data. bio ncov --fasta --type gene --end 10 &gt; gene-start.fa # Translate the DNA for features that have the type CDS. bio ncov --translate --type CDS &gt; translate.fa # Extract already translated proteins from the data. # The translation attribute must be filled in GenBank. bio ncov --protein --start -10 &gt; protein-end.fa # Coding sequences for a gene. bio ncov --fasta --type CDS --gene S --end 10 &gt; cds-gene-s.fa # Coding sequences for genes may be listed by gene name. Will list all coding sequences. bio ncov:S --fasta --end 10 &gt; cds-gene-s.fa # Another shortcut, this time we access coding sequences by the id. Will list just one specific sequence. bio ncov:YP_009724390.1 --fasta --end 10 &gt; cds-gene-s.fa # Extract the already traslated protein from the data. bio ncov:S --fasta --protein --seqid foo &gt; s_prot_foo.fa # Interactive mode. Data obtained from the command line paramter bio ATGGGC -i --fasta &gt; inter.fa # Translate in interactive mode. bio ATGGGC -i --translate &gt; inter-trans.fa # Translate on the reverse complement. bio ATGGGC -i --revcomp --translate &gt; inter-revcomp1.fa # You can separately reverse and complement bio ATGGGC -i --reverse --complement --translate &gt; inter-revcomp2.fa # Get the RaTG13 data. bio MN996532 --fetch --rename ratg13 --seqid ratg13 # Align the first 200 bp across both genomes. bio ncov ratg13 --end 210 --align &gt; align-dna.txt # Align the DNA for the coding sequences of the S protein. bio ncov:S ratg13:S --end 210 --align &gt; align-dna-s.txt # Align the translated DNA for the coding sequences of the S protein. # Slice appled to DNA before translation. bio ncov:S ratg13:S --end 210 --translate --align &gt; align-translated-s.txt # Align the already translated proteins. # Slice applied to the protein sequence. bio ncov:S ratg13:S --protein --end 70 --align &gt; align-protein-s.txt # Generate one letter peptide trace above the DNA bio ratg13:S ncov:S --start 91 --end 120 --align -1 &gt; align-short-pept.txt # Generate three letter peptide trace above the DNA bio ratg13:S ncov:S --start 91 --end 120 --align -3 &gt; align-long-pept.txt # Local alignment in interactive mode. bio THISLINE ISALIGNED -i --align --local &gt; align-local.txt # Global alignment in interactive mode. bio THISLINE ISALIGNED -i --align --global &gt; align-global.txt # Semiglobal alignment in interactive mode. bio THISLINE ISALIGNED -i --align --semiglobal &gt; align-semiglobal.txt # Check taxonomy defaults bio 9606 --taxon &gt; taxon_9606.txt # Generate lineage. bio 9606 --lineage --taxon &gt; taxon_9606_lineage.txt # The lineage may be flattened to a single line. bio 9606 --lineage --flat --taxon &gt; taxon_9606_flat_lineage.txt # Taxonomy information from data. bio ncov ratg13 --taxon &gt; taxon_ncov_ratg13.txt # Remove the old ebola if exists. bio ebola --delete # Fetch and rename the ebola data. bio KM233118 --fetch --rename ebola # Get the links to the data. bio ebola --sra &gt; sra-test.txt "],["bio-tips.html", "General tips Interactive mode The paramter format is forgiving The coordinate system is 1 based The order of operations is pre-determined You may use multiple accession numbers Generate more verbose outputs", " General tips Effort has been devoted to make the command line a bit more user friendly. Interactive mode Passing the -i flag allows data to be passed from command line. For example: bio --translate -i ATGATTATATATA &gt;S1 translated MIIY Note how the input was read as parameters from the command line. We make use of this feature when exploring simple data in an explicit way. The paramter format is forgiving You may use single or double dashes on parameters: bio ncov --fasta --end 100 or: bio ncov -fasta -end 100 both will work the same way. The coordinate system is 1 based Coordinates are 1 based (inclusive on both ends) identical to GFF coordinate formats. Numbers for start and end coordinates may be written in human friendly form, like so: 5000 or 5,000 or 5K or 5KB. The order of operations is pre-determined You may combine multiple parameters, in that case each condition will be applied sequentially in a internally detrermined order that is independent of the order the parameters are listed. For example when using a --start and --end and --translate the selection by start and end takes place on the DNA then the resulting sequence is translated into aminoacids. The same start, end combo followed by --protein applies the slice on the protein sequences as aminoacids. You may use multiple accession numbers Many commands allow using multiple accession numbers, in that case the operations will take place sequentially on each. bio NC_045512 MN996532 --fetch Generate more verbose outputs Use the -v flag to produce verbose outputs for each command. "],["bio-related.html", "Related software EMBOSS Entrez Direct gffutils Biocode GenomePy NCBI genome download", " Related software Since the beginning of bioinformatic times mankind was held down, hindered and obstructed by suboptimal dataformats, clunky interfaces, tedious procedures, bureaucratic protocols. No wonder a thriving cottage industry was born to deal with the challenges, bio being one of the proud entrants in the fray. Here is a list of packages weve evaluated and sometimes borrowed ideas from. Alas none quite works as we needed it, hence like our father, and our fathers father and their great grandfather, we have also set out to finally fix the problems once and for all. Descriptions are direct quotes from the projects homepage. EMBOSS EMBOSS is The European Molecular Biology Open Software Suite. EMBOSS is a free Open Source software analysis package specially developed for the needs of the molecular biology (e.g.EMBnet) user community. The software automatically copes with data in a variety of formats and even allows transparent retrieval of sequence data from the web. Also, as extensive libraries are provided with the package, it is a platform to allow other scientists to develop and release software in true open source spirit. EMBOSS also integrates a range of currently available packages and tools for sequence analysis into a seamless whole. EMBOSS breaks the historical trend towards commercial software packages. http://emboss.sourceforge.net/ Entrez Direct Entrez Direct (EDirect) provides access to the NCBIs suite of interconnected databases (publication, sequence, structure, gene, variation, expression, etc.) from a Unix terminal window. Search terms are entered as command-line arguments. Individual operations are connected with Unix pipes to allow construction of multi-step queries. Selected records can then be retrieved in a variety of formats. https://www.ncbi.nlm.nih.gov/books/NBK179288/ gffutils gffutils is a Python package for working with and manipulating the GFF and GTF format files typically used for genomic annotations. Files are loaded into a sqlite3 database, allowing much more complex manipulation of hierarchical features (e.g., genes, transcripts, and exons) than is possible with plain-text methods alone. https://github.com/daler/gffutils Biocode This is a collection of bioinformatics scripts many have found useful and code modules which make writing new ones a lot faster. https://github.com/jorvis/biocode GenomePy Easily install and use genomes in Python and elsewhere! The goal is to have a simple and straightforward way to download and use genomic sequences. Currently, genomepy supports UCSC, Ensembl and NCBI. https://github.com/vanheeringen-lab/genomepy NCBI genome download Some script to download bacterial and fungal genomes from NCBI after they restructured their FTP a while ago. Idea shamelessly stolen from Mick Watsons Kraken downloader scripts that can also be found in Micks GitHub repo. However, Micks scripts are written in Perl specific to actually building a Kraken database (as advertised). So this is a set of scripts that focuses on the actual genome downloading. https://github.com/kblin/ncbi-genome-download "]]
