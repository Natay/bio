[
["index.html", "Introduction Source code Why do we need this software? A realistic example The solution with bio What did bio do for us? But wait there is more Comparisons to EMBOSS", " Introduction Software under development. Operational but not fully vetted. bio - command-line utilities to make bioinformatics explorations more enjoyable. Built on top of BioPython, Parasail and other existing packages; bio streamlines bioinformatics tasks such as: downloading data from NCBI converting between data formats extracting partial information from files: select by gene, by coordinate, by matching a pattern … aligning sequences visualizing taxonomies … and others … Having access to all the utility described above makes the bio package well suited for exploratory analysis of genomes. Source code https://github.com/ialbert/bio Why do we need this software? If you’ve ever done bioinformatics you know how even seemingly straightforward tasks require multiple steps, arcane incantations, reading documentation and numerous other preparations that slow down your progress. Time and again I found myself not pursuing an idea because getting to the fun part was too tedious. The bio package is meant to solve that tedium. A realistic example Suppose you wanted to identify the differences between the S protein of the bat coronavirus deposited as MN996532 and the S protein of the ancestral SARS-COV-2 virus designated by the NCBI via accession number NC_045512. If you are a trained bioinformatician, think about all the steps you would need to perform to accomplish this task, then think about the effort it would take you to teach someone else how to do the same. The solution with bio With the bio package the process takes simple, concise steps. First we download and rename the data to have more manageable labels: bio NC_045512 --fetch --rename ncov bio MN996532 --fetch --rename ratg13 From now on bio can operate on NC_045512 using the name ncov and on MN996532 using the name ratg13 no matter where you are on your computer! It stores the data in an internal storage system that can be used from any folder. There is no clutter of files or paths to remember. For example, in any directory you now can type: bio ncov --fasta --end 100 and it will show you the first 100 bases of the genome &gt;ncov Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCT GTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTC You could also convert the data stored under ncov name to formats. Let’s convert just the CDS features annotated for gene S to say GFF: bio ncov --gff --gene S --type CDS the command above will print: ncov . CDS 21563 25384 . + 1 Name=YP_009724390.1;type=CDS;gene=S;protein_id=YP_009724390.1;product=surface glycoprotein;db_xref=GeneID:43740568 Now, back to our problem of aligning proteins. Let’s align the first 80 basepairs of DNA sequences for the S protein for each organism, bio even gives you a shortcut, instead of typing --gene S --type CDS you can write it as ncov:S : bio align ncov:S ratg13:S --end 80 That’s it. The command above produces: ### 1: YP_009724390 vs QHR63300.2 ### Length: 3827 (local) Query: 3822 [1, 3822] Target: 3810 [1, 3810] Score: 16694 Ident: 3554/3827 (92.9%) Simil: 3554/3827 (92.9%) Gaps: 22/3827 (0.6%) Matrix: nuc44(-11, -1) QHR63300.2 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTTTCTAGTCAGTGTGTTAATCTAACAACTAGAACTCAGTTACCTCCTGC ||||||||||||||||||||||||||||||||.||||||||||||||||||||.|||||.||||||||.|||||.||||| YP_009724390 ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAATTACCCCCTGC If instead we wanted to align the 80bp DNA sequences for S protein after their translation into proteins we could do it like so: bio align ncov:S ratg13:S --translate --end 80 Now the output is: ### 1: YP_009724390 vs QHR63300.2 ### Length: 26 (local) Query: 26 [1, 26] Target: 26 [1, 26] Score: 131 Ident: 26/26 (100.0%) Simil: 26/26 (100.0%) Gaps: 0/26 (0.0%) Matrix: blosum62(-11, -1) QHR63300.2 MFVFLVLLPLVSSQCVNLTTRTQLPP |||||||||||||||||||||||||| YP_009724390 MFVFLVLLPLVSSQCVNLTTRTQLPP We can note right away that all differences in the first 80bp of DNA are synonymous substitutions, the protein translations are the same. What did bio do for us? fetched the data from NCBI created a more efficient local representation the data stored this representation so that next time you need it is available much faster generated alignments But wait there is more How about translating the reverse of the last 10 nucleotides of every feature labeled as CDS. bio can do that like so: bio ncov --fasta --type CDS --start -10 --reverse --translate ah yes, just what I needed: &gt;YP_009724389.1 [-9:21291], reverse, translated DNA NQQ &gt;YP_009725295.1 [-9:13218], reverse, translated DNA NVA &gt;YP_009724390.1 [-9:3822], reverse, translated DNA NTH ... And so on. bio has a wealth of utility that makes bioinformatics more accessible. Comparisons to EMBOSS The software with the most similar goals to bio is the emboss suite, a revolutionary software package developed decades ahead of its time. Unfortunately, perhaps because of being developed so early on, the amazing feats of software engineering within emboss are deployed with a nearly incomprehensible documentation that attempts, in vain, to describe an incredibly obtuse command interface. We love the concept of emboss but even after many years we don’t understand how to use it. We constantly have to consult the manual for details. Moreover commands that use emboss suites tend to end up as a series of hard to read arcane commands that are surprisingly difficult to comprehend even for experienced scientists. Criticism aside, imitation is the greatest form of flattery, bio is an homage to emboss with the hope that one day, we can replace the functionality from emboss with code brings joy rather than frustrations. "],
["install.html", "Software installation Prerequisites Installation Quick start Usage Getting help Help pages", " Software installation Prerequisites We don’t fully automate the dependency installation to give users the option of using the approach they prefer. To install the requirements with conda write: conda install -c bioconda biopython pysam parasail-python You may also install the requirements via pip: pip install biopython pysam parasail-python Installation Install the package with: pip install bio --upgrade Quick start Run a simple fetch command, set the verbose mode to see what is happening: bio NC_045512 --fetch -v now list the known data: bio --list try out a conversion: bio NC_045512 --gff Usage Type bio followed by one or more accession numbers followed by one or more flags or options. bio [command] [words] --option value --flag Commands may be: align, taxon. When no commands are passed the default actions take place. The words may be one or more data names. A flag is a parameter that does not take additional values: --fetch or --list An option is a parameter that takes an additional value: --start 100 or --gap-open 10 Use the -v flag to produce verbose outputs for a run. Subcommands Certain words may not be used as data names as they carry additional meaning and trigger alternative actions bio align data1 data2 --option value --flag You may get help on alignments with: bio align -h Getting help bio -h to get help for a specific command: Help pages Besides the default actions bio may also take subcommands such as align. Each subcommand has its own command line help page. 1. Help page for default actions bio -h usage: bio [-h] [-F] [-G] [-f] [-u] [-d] [-l] [-P] [-T] [-X] [-E] [-C] [-R] [-r &#39;&#39;] [-S &#39;&#39;] [-s &#39;&#39;] [-e &#39;&#39;] [-t &#39;&#39;] [-g &#39;&#39;] [-m &#39;&#39;] [-i] [-v] [acc [acc ...]] bio - making bioinformatics fun again command line utility for manipulating bioinformatics data positional arguments: acc data names optional arguments: -h, --help show this help message and exit -F, --fasta produce FASTA format -G, --gff produce GFF format -f, --fetch download data as accessions -u, --update updates data in storage -d, --delete delete data in storage -l, --list list data in storage -P, --protein operate on proteins -T, --translate translate DNA to protein -X, --transcribe transrcribe DNA to RNA -E, --reverse reverse sequence -C, --complement complement sequence -R, --revcomp reverse complement sequence -r &#39;&#39;, --rename &#39;&#39; set the name -S &#39;&#39;, --seqid &#39;&#39; set the sequence id -s &#39;&#39;, --start &#39;&#39; start coordinate -e &#39;&#39;, --end &#39;&#39; end coordinate -t &#39;&#39;, --type &#39;&#39; select feature by type -g &#39;&#39;, --gene &#39;&#39; select features associated with gene -m &#39;&#39;, --match &#39;&#39; select features by rexep match -i, --inter interactive (data from command line) -v, --verbose verbose mode 2. Help page for alignments bio align -h usage: bio [-h] [-s 1] [-e &#39;&#39;] [-o 11] [-x 1] [-L] [-G] [-S] [-p] [-t] [-i] [-v] [query] [target] Performs an alignment between the query and target. positional arguments: query query sequence to align target target sequence to align optional arguments: -h, --help show this help message and exit -s 1, --start 1 start coordinate -e &#39;&#39;, --end &#39;&#39; end coordinate -o 11, --gap-open 11 scoring matrix -x 1, --gap-extend 1 scoring matrix -L, --local perform local alignment -G, --global perform global alignment (zero end gap penalty) -S, --semiglobal perform a semiglobal alignment -p, --protein use the translated protein sequences from the data -t, --translate use the translated protein sequences from the data -i, --inter interactive mode, data from command line -v, --verbose verbose mode, progress messages printed 3. Help page for taxonomy bio taxon -h usage: bio [-h] [-T 0] [-l] [-f] [-i ] [-S ,] [-L] [-b] [-d] [-p] [-v] [-n] [words [words ...]] positional arguments: words taxids or search queries optional arguments: -h, --help show this help message and exit -T 0, --limit 0 limit the number of entries -l, --list lists database content -f, --flat flattened output -i , --indent the indentation string -S , , --sep , separator string -L, --lineage show the lineage for a taxon term -b, --build build a database from a taxdump -d, --download download newest taxdump from NCBI -p, --preload loads entire database in memory -v, --verbose verbose mode, prints more messages -n, --nostdin do not detect standard input "],
["data.html", "Data management Example output", " Data management The bio package solves the ongoing struggle of how to maintain sanity among diverse datasets. When you obtain data with bio it becomes universally available to all tools in the package. Local data There is an automated data storage in bio that makes using data from NCBI quite convenient. But before we even go ther let’s make it clear that bio can read and process data from local files just fine. If you have a genbank or fasta file you can use that as input. Here we turn a genbank file into gff: bio mydata.gb --gff Moreover there is a so called interactive input of data (-i) where the data can be listed at the command line: bio ATGAATATATAC -i --translate The above command will operate on the sequence as if it were stored in a FASTA file, the above prints: &gt;S1 translated DNA MNIY It is a neat way to demonstrate translation that takes place in different phases: bio ATGAATATATACT -i --translate --start 1 &gt;A1 translated DNA MNIY bio ATGAATATATACT -i --translate --start 2 &gt;A1 [2:13], translated DNA *IYT Getting data from NCBI (–fetch) The --fetch command downloads data identified via accession numbers from NCBI then stores this data in a storage directory (~/.bio). All subsequent commands in the bio package can seamlessly access the stored data from any location and would not need to connect to the internet to use it. # Run fetch in verbose mode. bio NC_045512 --fetch -v Running the fetch command the next time for the accession number will not connect to the internet again, it will exit instead. Use the --fetch --update (see later) to force a re-downloading of data from NCBI. Most commands can operate on multiple accession numbers at a time. bio NC_045512 MN996532 --fetch There will be commands like --rename where it makes no sense to apply the operation on multiple data at the same time. In those cases only the first accession number is acted upon. The internal, gzip compressed, JSON based representation used by bio is simple, efficient and highly performant. A 330MB GenBank file for chromosome 1 of the human genome obtained from NCBI will in our data representation take just 67MB to store. More importantly our data representation can read and converted to fasta format in 6 seconds: time bio NC_000001 --fasta | wc -c 253105766 real 0m6.189s Rename (–rename) Accession numbers are tedious to handle. Almost always we rename data to be meaningful. bio NC_045512 --fetch --rename ncov the command above will store the data under the name ncov. Within the data the sequence will still be labeled as NC_045512. You may change both the name and sequence id: bio NC_045512 --fetch --rename ncov --seqid ncov bio NC_045512 --fetch --rename ratg13 --seqid ratg13 Now, not only is your data called ncov but the sequence id inside the data is also set to ncov. Listing the storage (–list) Each time data is fetched is will be stored locally. The bio package will look in this storage no matter what directory you run it from. To list the content of the storage write: bio --list it prints: 22K ncov Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome 19K ratg13 Bat coronavirus RaTG13, complete genome Delete data (–delete) To drop data from storage use: bio ncov --delete This command will only drop the JSON representation not the downloaded GenBank if exists. If you want to update the original data use the --update parameter. Update data (–update) To force fetch to download data that already seems to be present do: bio NC_045512 --fetch --update Note that you can’t update a renamed sequence. At that point the original accession number is lost. You can however fetch, update and rename all in one go like so: bio NC_045512 --fetch --update --rename ncov --seqid ncov There is a builtin order of operations, does not matter what order you list commands. For example --delete would take place first before the --fetch and so on. View data The default action is to view the stored data. Locally the data is stored in a JSON format that makes processing it much faster than the original GenBank yet has no loss of information: bio ncov | head You can subselect and view sections of the data, for example the S gene: bio ncov:S | head Many other combinations are valid: bio ncov --type CDS When viewing the data directly you are shown the JSON based data that bio uses internally. Example output bio ncov | head [ { &quot;id&quot;: &quot;ncov&quot;, &quot;definition&quot;: &quot;Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome&quot;, &quot;dblink&quot;: [ &quot;BioProject:PRJNA485481&quot; ], &quot;locus&quot;: &quot;NC_045512&quot;, &quot;feature_count&quot;: 57, &quot;origin_len&quot;: 29903, "],
["convert.html", "Format conversions", " Format conversions The bio package may be used to convert data from GenBank to other formats: FASTA, GFF extract only certain sections of data: features by name, coordinate, range View the JSON representation of the data: bio ncov | head [ { &quot;id&quot;: &quot;ncov&quot;, &quot;definition&quot;: &quot;Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome&quot;, &quot;dblink&quot;: [ &quot;BioProject:PRJNA485481&quot; ], &quot;locus&quot;: &quot;NC_045512&quot;, &quot;feature_count&quot;: 57, &quot;origin_len&quot;: 29903, View the JSON representation for a feature: bio ncov --type CDS --gene S | head [ { &quot;start&quot;: 21563, &quot;end&quot;: 25384, &quot;type&quot;: &quot;CDS&quot;, &quot;strand&quot;: 1, &quot;location&quot;: [ [ 21563, 25384, Convert all features to GFF: bio ncov --gff | head -5 ##gff-version 3 ncov . five_prime_UTR 1 265 . + 1 Name=;type=5&#39;UTR ncov . gene 266 21555 . + 1 Name=ORF1ab;type=gene;gene=ORF1ab;db_xref=GeneID:43740578 ncov . CDS 266 21555 . + 1 Name=YP_009724389.1;type=CDS;gene=ORF1ab;protein_id=YP_009724389.1;product=ORF1ab polyprotein;db_xref=GeneID:43740578 ncov . mature_protein_region 266 805 . + 1 Name=YP_009725297.1;type=mat_peptide;gene=ORF1ab;protein_id=YP_009725297.1;product=leader protein Convert to GFF only the features with type CDS bio ncov --gff --type CDS | head -5 ##gff-version 3 ncov . CDS 266 21555 . + 1 Name=YP_009724389.1;type=CDS;gene=ORF1ab;protein_id=YP_009724389.1;product=ORF1ab polyprotein;db_xref=GeneID:43740578 ncov . CDS 266 13483 . + 1 Name=YP_009725295.1;type=CDS;gene=ORF1ab;protein_id=YP_009725295.1;product=ORF1a polyprotein;db_xref=GeneID:43740578 ncov . CDS 21563 25384 . + 1 Name=YP_009724390.1;type=CDS;gene=S;protein_id=YP_009724390.1;product=surface glycoprotein;db_xref=GeneID:43740568 ncov . CDS 25393 26220 . + 1 Name=YP_009724391.1;type=CDS;gene=ORF3a;protein_id=YP_009724391.1;product=ORF3a protein;db_xref=GeneID:43740569 Convert to GFF only the features tagged with gene S bio ncov --gff --gene S | head -5 ##gff-version 3 ncov . gene 21563 25384 . + 1 Name=S;type=gene;gene=S;db_xref=GeneID:43740568 ncov . CDS 21563 25384 . + 1 Name=YP_009724390.1;type=CDS;gene=S;protein_id=YP_009724390.1;product=surface glycoprotein;db_xref=GeneID:43740568 Convert to GFF only the features that overlap a interval bio ncov --gff --start 2000 --end 3000 | head -5 ##gff-version 3 ncov . gene 266 21555 . + 1 Name=ORF1ab;type=gene;gene=ORF1ab;db_xref=GeneID:43740578 ncov . CDS 266 21555 . + 1 Name=YP_009724389.1;type=CDS;gene=ORF1ab;protein_id=YP_009724389.1;product=ORF1ab polyprotein;db_xref=GeneID:43740578 ncov . mature_protein_region 806 2719 . + 1 Name=YP_009725298.1;type=mat_peptide;gene=ORF1ab;protein_id=YP_009725298.1;product=nsp2 ncov . mature_protein_region 2720 8554 . + 1 Name=YP_009725299.1;type=mat_peptide;gene=ORF1ab;protein_id=YP_009725299.1;product=nsp3 Convert the data to FASTA (the origin of the GenBank) bio ncov --fasta | head -5 &gt;ncov Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGTAGATCT GTTCTCTAAACGAACTTTAAAATCTGTGTGGCTGTCACTCGGCTGCATGCTTAGTGCACT CACGCAGTATAATTAATAACTAATTACTGTCGTTGACAGGACACGAGTAACTCGTCTATC TTCTGCAGGCTGCTTACGGTTTCGTCCGTGTTGCAGCCGATCATCAGCACATCTAGGTTT Extract a partial sequence and change the sequence id bio ncov --fasta --start 100 --end 200 --seqid foo | head -5 &gt;foo Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome CGGCTGCATGCTTAGTGCACTCACGCAGTATAATTAATAACTAATTACTGTCGTTGACAG GACACGAGTAACTCGTCTATCTTCTGCAGGCTGCTTACGGT Extract the last ten DNA bases bio ncov --fasta --start -10 --seqid last | head -5 &gt;last Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome AAAAAAAAAA Extract the sequences for features of a certain type bio ncov --fasta --type CDS | head -5 &gt;YP_009724389.1 Name=YP_009724389.1;type=CDS;gene=ORF1ab;protein_id=YP_009724389.1;product=ORF1ab polyprotein;db_xref=GeneID:43740578 ATGGAGAGCCTTGTCCCTGGTTTCAACGAGAAAACACACGTCCAACTCAGTTTGCCTGTT TTACAGGTTCGCGACGTGCTCGTACGTGGCTTTGGAGACTCCGTGGAGGAGGTCTTATCA GAGGCACGTCAACATCTTAAAGATGGCACTTGTGGCTTAGTAGAAGTTGAAAAAGGCGTT TTGCCTCAACTTGAACAGCCCTATGTGTTCATCAAACGTTCGGATGCTCGAACTGCACCT Gene name may be encoded in the name bio ncov:S --fasta --start 100 --end 200 | head -5 &gt;YP_009724390.1 [100:200] CGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGTTTTACATTCAACTCAGGAC TTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGC "],
["align.html", "Sequence alignments", " Sequence alignments bio align THISLINE ISALIGNED -i ### 1: S1 vs S2 ### Length: 11 (semiglobal) Query: 8 [1, 8] Target: 9 [1, 8] Score: 8 Ident: 4/11 (36.4%) Simil: 5/11 (45.5%) Gaps: 5/11 (45.5%) Matrix: blosum62(-11, -1) S1 THISLI--NE- 1 ||.: || 11 S2 --ISALIGNED # Align the extracted protein. bio align ncov:S ratg13:S --end 80 &gt; align-dna-s.txt # Align the extracted protein. bio align ncov:S ratg13:S --protein &gt; align-protein-s.txt # Align the translated regions. bio align ncov:S ratg13:S --end 80 --translate &gt; align-translated-s.txt # Test alignments bio align THISLINE ISALIGNED -i &gt; align-local.txt # Default alignment is semiglobal. bio align THISLINE ISALIGNED -i &gt; align-local.txt # Global alignment. bio align THISLINE ISALIGNED -i --global &gt; align-global.txt # Semiglobal alignment. bio align THISLINE ISALIGNED -i --local &gt; align-semiglobal.txt "],
["taxon.html", "Taxonomy operations Building the taxonomy Check database View a tax id Taxonomic lineage Searching for taxids Filter blast results List the content of the database: Preloading data", " Taxonomy operations The bio package provides utility to visualize NCBI taxonomies. Building the taxonomy Before using the taxonomy related functionality the representation needs to be built: bio taxon --download --build The command above has to be run once (perhaps on a monthly basis) to download and process the latest NCBI taxonomy. The efficiency of the process depends on the speed of the hard drive and takes around 30 minutes. Check database bio taxon prints: TaxDB: nodes=2,288,072 parents=198,666 There are a total of 2,288,072 nodes (taxonomical entries) out of which 198,666 are nodes that are non-terminal (non-leaf) nodes. For these numbers we see that the vast majority of the taxonomy annotations are for terminal, leaf nodes. View a tax id Pass a NCBI taxonomical id to see all the descendants of it: bio taxon 117565 | head class, Myxini, 117565 order, Myxiniformes, 7761 family, Myxinidae (hagfishes), 7762 subfamily, Eptatretinae, 30309 genus, Eptatretus, 7763 species, Eptatretus burgeri (inshore hagfish), 7764 species, Eptatretus stoutii (Pacific hagfish), 7765 species, Eptatretus okinoseanus, 7767 species, Eptatretus atami, 50612 species, Eptatretus cirrhatus (broadgilled hagfish), 78394 Taxonomic lineage To print the lineage of a term use: bio taxon 564286 --lineage no rank, cellular organisms, 131567 superkingdom, Bacteria (eubacteria), 2 clade, Terrabacteria group, 1783272 phylum, Firmicutes, 1239 class, Bacilli, 91061 order, Bacillales, 1385 family, Bacillaceae, 186817 genus, Bacillus, 1386 species group, Bacillus subtilis group, 653685 species, Bacillus subtilis, 1423 strain, Bacillus subtilis str. 10, 564286 the lineage may be flattened: bio taxon 564286 --lineage --flat 564286 cellular organisms;Bacteria;Terrabacteria group;Firmicutes;Bacilli;Bacillales;Bacillaceae;Bacillus;Bacillus subtilis group;Bacillus subtilis;Bacillus subtilis str. 10 it is also possible to pipe data into the tool: cat taxids | bio taxon --lineage Searching for taxids Searches the taxonomy for a word bio taxon jawed prints: # searching taxonomy for: jawed clade, Gnathostomata (jawed vertebrates), 7776 species, Gillichthys mirabilis (long-jawed mudsucker), 8222 species, Pseudamia amblyuroptera (white-jawed cardinalfish), 1431476 species, Myctophum brachygnathum (short-jawed lanternfish), 1519985 species, Oryzias orthognathus (sharp-jawed buntingi), 1645897 species, Longjawed orbweaver circular virus 1, 2293294 species, Longjawed orbweaver circular virus 2, 2293295 The search words may use regular expression control characters: bio taxon &#39;^jawed&#39; produces: # searching taxonomy for: ^jawed clade, Gnathostomata (jawed vertebrates), 7776 Filter blast results (TODO) - filters BLAST alignment for species that fall within a taxonomical clade List the content of the database: bio taxon --list | head prints: no rank, root, 1 superkingdom, Bacteria (eubacteria), 2 genus, Azorhizobium, 6 species, Azorhizobium caulinodans, 7 species, Buchnera aphidicola, 9 genus, Cellvibrio, 10 species, Cellulomonas gilvus, 11 genus, Dictyoglomus, 13 species, Dictyoglomus thermophilum, 14 genus, Methylophilus, 16 Note: this command benefits greatly from using --preload. Preloading data For many use cases, the default behavior is plenty fast and can produce family, genus and species level information in a fraction of a second. Internally, during operation, the software will query the database for each child node. When selecting a rank where the number of descendant nodes is large (over 10,000 nodes) the run time of the independent queries adds up to a substantial overhead. For example the command below attempts to render the complete NCBI taxonomic tree with over 2.2 million descendant nodes. When run like so it will take a very long time to produce the output (more than two hours): bio taxon 1 The software can operate in a different mode to speed up the process massively by preloading all the data into memory at the cost of imposing a 6 second pre-loading penalty. bio taxon 1 --preload When run with the --preload flag the command takes a total of just 11 seconds to generate the same large tree of the entire NCBI taxonomical tree. We don’t apply this mode by default because all queries would then take at least 6 seconds, even those that currently finish very quickly. For queries that take more than 10 seconds to complete (have more than 10,000 descendant nodes) we recommend applying the --preload flag. "],
["tips.html", "Usage tips Interactive mode The command line is more forgiving: The coordinate system is 1 based The order of operations is pre-determined You may use multiple accession numbers Generate more verbose outputs", " Usage tips Interactive mode Passing the -i flag allows data to be passed from command line. For example: bio --translate -i ATGATTATATATA &gt;A1 translated DNA MIIY Note how the input was read as parameters from the command line. We make use of this feature when exploring simple data in an explicit way. Here we’re using a different phase to translate the same sequence above. bio --translate -i ATGATTATATATA --start 2 &gt;A1 [2:13], translated DNA *LYI The command line is more forgiving: You may write short or long form commands: bio ncov --fasta --end 100 or you may write: bio ncov -fasta -end 100 both will work the same way. The coordinate system is 1 based Coordinates are 1 based (inclusive on both ends) identical to GFF coordinate formats. The order of operations is pre-determined You may combine multiple parameters, in that case each condition will be applied sequentially in a internally detrermined order that is independent of the order the parameters are listed. For example when using a --start and --end and --translate the selection by start and end takes place on the DNA then the resulting sequence is translated into aminoacids. The same start, end combo followed by --protein applies the slice on the protein sequences as aminoacids. You may use multiple accession numbers Many commands allow using multiple accession numbers, in that cose the operations will take place sequentially on each. Generate more verbose outputs Use the -v flag to produce verbose outputs for each command. "]
]
